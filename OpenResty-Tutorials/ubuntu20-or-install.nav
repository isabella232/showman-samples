# Copyright (C) by OpenResty Inc. All rights reserved
#
# The generated video is here: https://youtu.be/Hu68mQDKXCo

term:
    Hi, I'm Matthew from OpenResty Inc. Today I'd demonstrate how to install OpenResty on Ubuntu 20.04 via `apt-get`.

        ssh ubuntu20-min
        [NEWSH][NOP]
        $ cat /etc/os-release

    [S] We'll use this fresh install of Ubuntu 20.04 in this video.

desc:
    We can always goto the [openresty.org](https://openresty.org/) web site to find the instructions.

goto "https://openresty.org"

desc:
    Then click on the Installation menu.

elems:
    [Link "Blog"]
    [Link "Download"]=dl
    [Link "Installation"]=inst

click -> inst

desc:
    And click on the link "official pre-built packages".

elems:
    [Title "Binary Packages"]
    [Link "official pre-built packages"]=pkgs

click -> pkgs

elems:
    [Title "OpenResty® Linux Packages"]

desc:
    We do support a lot of Linux distributions.

scroll down 300px

sleep 300ms

scroll down 350px

sleep 300ms

scroll down 350px

sleep 300ms

scroll down 350px

sleep 300ms

elems:
    [Title "OpenResty® Linux Packages"]
    [Link "Ubuntu"]=ubuntu

desc:
    Click on the Ubuntu link.

click -> ubuntu

desc(sync):
    We can find all the commands for enabling the APT repository and installing the OpenResty Deb packages.

term:
    Back to our Ubuntu 20.04 system. If you already have anything listening on the local port 80, then you should disable it.

        $ sudo lsof -i:80

    [S] Here we don't have any.

    First of all, make sure the system time is correct:

        $ sudo ntpdate -v time.google.com

    [S] You may want to use a different NTP server near you here.

    We should install some prerequisites needed by adding GPG public keys. These could be removed later.

        $ sudo apt-get -y install --no-install-recommends wget gnupg ca-certificates

    Let's import our GPG key:

        $ wget -O - https://openresty.org/package/pubkey.gpg | sudo apt-key add -

    Then add the our official APT repository.

        $ echo "deb http://openresty.org/package/ubuntu $(lsb_release -sc) main" > openresty.list
        $ sudo cp openresty.list /etc/apt/sources.list.d/

    [S] Note that this is for an `x86_64` or `amd64` system.

    For Aarch64 or ARM64 systems, you should use this URL instead.

        $ echo "deb http://openresty.org/package/arm64/ubuntu $(lsb_release -sc) main"

    Now update the APT index:

        $ sudo apt-get update

    [S] Note that we need `sudo` here.

    Now it's time to install our main RPM package, `openresty`.

        $ sudo apt-get -y install --no-install-recommends openresty

    Check if the `openresty` executable is available.

        $ which openresty

    This `openresty` executable is just a symbolic link.

        $ file `which openresty`

    And check its version.

        $ openresty -V

    We can start the default openresty server like this.

        $ sudo systemctl start openresty

    Check if the nginx processes are up and running.

        $ ps aux|grep nginx

    [S] Perfect.

    Test the default home page with the `curl` command.

        $ curl 127.0.0.1/

    [S] Yay, it's working.

    Note, however, that the `resty` command-line utility is not installed yet.

        $ which resty

    If you want it, then you can install the `openresty-resty` RPM package from the same repository.

        $ sudo apt-get -y install openresty-resty

    Now it should be ready.

        $ which resty
        $ resty -e 'print("Hello Resty")'

    Similarly, if you want to use the `restydoc` command-line utility, you should install the `openresty-doc` package.

        $ sudo apt-get -y install openresty-restydoc

    Now it's available too.

        restydoc -s content_by_lua_file
        [SLEEP=1] [SP] [NOP]
        [SLEEP=1] q [NONL]
        $

    We can also install OPM for installing more Lua modules contributed by the OpenResty community.

        $ sudo apt-get -y install openresty-opm

    We can try installing the `lua-resty-http` library authored by James Hurst.

        $ sudo opm get pintsized/lua-resty-http

    Try loading it with the `resty` utility.

        $ resty -e 'require "resty.http"'

    [S] Success!

    There is also a debug build of OpenResty which includes debugging logs and all the internal assertions enabled.

        $ sudo apt-get -y install openresty-debug

    We can invoke this debug version of openresty like this.

        $ which openresty-debug

    This `openresty-debug` executable is also a symbolic link.

        $ file `which openresty-debug`

    [S] We should never use it in production since it is much slower than the release build.

    Furthermore, there are also special builds for checking memory issues via Valgrind.

        $ sudo apt list openresty-valgrind

    [S] Try these when you have memory issues to debug. We may cover these in future tutorials.

    To upgrade OpenResty packages to their latest versions, just run these commands.

        $ sudo apt-get update
        $ sudo apt-get --only-upgrade -y install 'openresty*'

    To check all the available packages in our openresty repository.

        apt list 'openresty*' | less

    [S] We've got a lot of binary packages here.

        [SLEEP=1] q [NONL]
        $

desc:
    We can find detailed documentation for all these Deb packages on this web page.

goto "https://openresty.org/en/deb-packages.html"

desc:
    We have indeed got a lot of packages for the user to choose from.

elems:
    [Title "openresty"]

sleep 500ms

scroll down 500px

sleep 500ms

scroll down 600px

sleep 500ms

scroll down 600px

sleep 500ms

elems:
    [Title "Debug Symbol Packages"]

sleep 500ms

scroll down 200px

sleep 200ms

ds:
    That's all I'd like to cover today. Have fun!
